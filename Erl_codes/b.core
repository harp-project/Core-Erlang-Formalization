module 'b' ['module_info'/0,
	    'module_info'/1,
		'fun1'/0,
		'fun2'/0,
		'fun3'/0,
		'fun4'/0,
		'fun6'/0,
		'fun7'/0,
		'fun7'/1,
		'fun8'/0,
		'fun9'/0,
		'fun10'/0,
		'fun11'/0,
		'fun12'/0,
		'fun13'/1,
		'fun14'/0,
		'fun15'/0,
		'fun16'/0,
		'g'/0,
		'exp'/0,
		'mapex'/0,
		'infex'/0]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[98|[46|[101|[114|[108]]]]],1}]]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('b')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('b', _0)

'mapex'/0 =
  fun() ->
    letrec 'map'/2 = fun(F, L) ->
      case L of
        <[]> when 'true' -> []
        <[H|T]> when 'true' -> [apply F(H) | apply 'map'/2(F, T)]
      end 
    in apply 'map'/2(fun(X) -> call 'erlang':'+'(X, 1), [1,2,3])

'infex'/0 =
  fun() ->
    letrec 'f'/1 = fun(X) ->
      do call 'io':'fwrite'("~w",[X])
        apply 'f'/1(call 'erlang':'+'(X, 1))
    in
      apply 'f'/1(0)

'unexp'/0 = fun() -> 0
'exp'/0 = fun() -> call 'b':'unexp'()

'g'/0 = fun() -> do call 'erlang':'!'(call 'erlang':'self'(), 1)
                    do call 'erlang':'!'(call 'erlang':'self'(), 2)
                      do call 'erlang':'!'(call 'erlang':'self'(), 3)
                      do call 'timer':'sleep'(0)
                        try
                          receive 3 when call 'erlang':'/'(2, 0) -> 'yougotme' after 'infinity' -> 0
                        of <X> -> X
                        catch
                          <X_c, Y, Z> -> %%do call 'timer':'sleep'(0)
                                         {X_c, Y, Z,
                                          {receive XX when 'true' -> XX after 0 -> 'noval',
                                          receive XX when 'true' -> XX after 0 -> 'noval',
                                          receive XX when 'true' -> XX after 0 -> 'noval',
                                          receive XX when 'true' -> XX after 0 -> 'noval'}}

'fun1'/0 =
	fun() ->
%		 case 
%		   {<2, 3>, 4}
%		 of
%		  {W, Q} when 'true' -> W
%		  Q when 'true' -> 5
%		 end
%	let <X, Y> = let <W, Z> = < <3, 4>, 6> in W in {X, Y}
%	{<3>, <4>, <5>}
%	let <X, Y, Z> = <fun() -> 5, fun() -> 5, fun() -> 5> in {X, Y, Z}
%	let X = fun() -> <3, 4, 5> in let <Y, Z, W> = apply X() in {Y, Z, W}
%	let <X> =
%		case 5 of
%		  5 when 'true' -> <2>
%		  X when 'true' -> 1
%		end
%	in
%		{X, X}
%[3, <>, 5]
%do <3, 4, 5>
   4


'fun2'/0 =
	fun() ->
		let X = fun() -> 5 in let X = fun() -> 6 in apply X()

'fun3'/0 =
	fun() -> let Y = [let X = 1 in X | [let X = 2 in X]] in Y

'fun5'/2 =
	fun(X, Y) -> {X,Y}

'fun4'/0 =
	fun() -> apply 'fun5'/2(let X = 7 in X,let X = 3 in 3)

'fun6'/0 =
	fun() -> let X = 5 in
				let X = fun(X, Y) -> X in apply X(4,fun() -> 5)
'fun7'/0 =
	fun() -> fun() -> 5

'fun7'/1 =
	fun(X) -> let Y = fun() -> 5 in let Y = fun(A) -> A in apply Y()
	
'fun8'/0 =
	fun() -> let X = 5 in let <X, Z, Y> = <3,4,X> in Y

'fun9'/0 =
	fun() -> let Y = fun() -> 5 in let Z = 5 in apply Y()

'fun10'/0 =
	fun() -> let X = 42 in let Y = fun(X) -> X in let X = 5 in apply Y(7)

'fun11'/0 =
	fun() -> let X = 5 in let X = fun() -> X in apply X()
'fun12'/0 =
	fun() -> ~{{2, 6} => 5, ~{}~ => 4, ~{3 => 5}~ => 4, fun() -> 5 => 6, call 'erlang':'+'(3,4) => 2}~

'fun13'/1 =
	fun(X) -> case X of
				<5> when 'true' -> 5
				<6> when 'true' -> 6
				<{Y, Z}> when call 'erlang':'=='(X, {6, 7}) -> Z
				<[Z | [Y]]> when 'true' -> Y
			  end

'fun14'/0 =
	fun() -> let X = 5 in 
				letrec 'fun14'/0 = fun() -> X
					   'b'/1 = fun(Z) -> case Z of 
											<1> when 'true' -> 0
											<N> when 'true' -> apply 'b'/1(call 'erlang':'-' (N, 1))
										 end
				in apply 'b'/1(15)

'fun15'/0 =
    fun () ->
	{ call 'io':'format' ([72|[101|[108|[108|[111]]]]]), call 'erlang':'/' (1,0), call 'io':'format' ([72|[101|[108|[108|[111]]]]])}

'fun16'/0 =
	fun() -> let X = 5 in
				let X = fun() -> X in
					let X = fun() -> apply X() in
						let X = fun() -> apply X() in
							apply X()
end

module 'side_effect_exception_tests' ['module_info'/0,
					    'module_info'/1,
						'eval_list_tail'/0,
						'eval_list_head'/0,
						'eval_tuple_s_e'/0,
						'eval_try_s_e'/0,
						'eval_catch'/0,
						'eval_case_pat'/0,
						'eval_case_clause'/1,
						%'eval_case_guard'/0,
						'eval_call_s_e'/0,
						'eval_apply_closure_ex'/0,
						'eval_apply_param'/0,
						'eval_apply_closure'/0,
						'eval_apply_param_len'/0,
						'eval_let'/0,
						'eval_map_key'/0,
						'eval_map_value'/0,
						'eval_seq_1'/0,
						'eval_seq_2'/0
						]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[105|[100|[101|[95|[101|[102|[102|[101|[99|[116|[95|[101|[120|[99|[101|[112|[116|[105|[111|[110|[95|[116|[101|[115|[116|[115|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 2
		'compile' =
		    %% Line 2
		    ['export_all']]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('side_effect_exception_tests')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('side_effect_exception_tests', _0)

'eval_list_tail'/0 = fun() -> 
   [call 'io':'fwrite'('a')|[let X = call 'io':'fwrite'('b') in apply 0()|[]]]
  
'eval_list_head'/0 = fun() -> 
   [apply 0()|[call 'io':'fwrite'('a')|[]]]
   
'eval_tuple_s_e'/0 = fun() -> 
   {call 'io':'fwrite'('a'),let X = call 'io':'fwrite'('b') in apply 0()}
   
'eval_try_s_e'/0 = fun() -> 
   try call 'io':'fwrite'('a') of
     <X> -> let X = call 'io':'fwrite'('b') in apply 0()
    catch <Ex1, Ex2, Ex3> -> 'error'
   
'eval_catch'/0 = fun() -> 
   try let X = call 'io':'fwrite'('a') in apply 0() of
     <X> -> call 'io':'fwrite'('b')
    catch <Ex1, Ex2, Ex3> -> call 'io':'fwrite'('c')
   
'eval_case_pat'/0 = fun() -> 
   case let X = call 'io':'fwrite'('a') in apply 0() of
	 <X> when 'true' -> call 'io':'fwrite'('b')
   end

'eval_case_clause'/1 = fun(Y) -> 
   case let X = call 'io':'fwrite'('a') in Y of
	 <1> when 'true' -> call 'io':'fwrite'('b')
	 <Z> when 'false' -> call 'io':'fwrite'('c')
   end
   
'eval_call_s_e'/0 = fun() -> 
   call 'io':'fwrite'(call 'io':'fwrite'('a'), apply 0())
   
'eval_apply_closure_ex'/0 = fun() -> 
   apply let X = call 'io':'fwrite'('a') in apply 0()()
   
'eval_apply_param'/0 = fun() -> 
   apply call 'io':'fwrite'('a')(let X = call 'io':'fwrite'('b') in apply 0())
   
'eval_apply_closure'/0 = fun() -> 
   apply call 'io':'fwrite'('a')(call 'io':'fwrite'('b'))
   
'eval_apply_param_len'/0 = fun() -> 
   let X = fun() -> 5 in
     apply X(call 'io':'fwrite'('a'))
   
'eval_let'/0 = fun() -> 
   let X = let Y = call 'io':'fwrite'('a') in apply 2() in apply 0()
   
'eval_map_key'/0 = fun() -> 
   ~{call 'io':'fwrite'('a') => call 'io':'fwrite'('b'), 
     let X = call 'io':'fwrite'('c') in apply 0() => call 'io':'fwrite'('d')}~
   
'eval_map_value'/0 = fun() -> 
   ~{call 'io':'fwrite'('a') => call 'io':'fwrite'('b'), 
     call 'io':'fwrite'('c') => let X = call 'io':'fwrite'('d') in apply 0()}~

'eval_seq_1'/0 = fun() ->
	do let X = call 'io':'fwrite'('a') in apply 0() call 'io':'fwrite'('b')

'eval_seq_2'/0 = fun() ->
	do call 'io':'fwrite'('a') do let X = call 'io':'fwrite'('b') in apply 0() call 'io':'fwrite'('c')

end
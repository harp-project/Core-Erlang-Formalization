module 'tests' ['module_info'/0,
		'module_info'/1,
		'eval_letrec1'/0,
		%'eval_letrec2'/0,
		'eval_multiple_top_level_funs'/0,
		'eval_multiple_top_level_funs2'/0,
		'top_overwrite'/0,
		'top_no_overwrite'/0,
		%'eval_let_func'/0,
		'eval_let_apply'/0,
		'eval_multiple_let'/0,
		'let_eval_1'/0,
		'let_eval_2'/0,
		%'let_eval_3'/0,
		'let_eval_4'/0,
		'tuple_eval'/0,
		'apply_top_eval'/0,
		'apply_eval'/0,
		'list_eval'/0,
		'list_eval2'/0,
		'let_eval_overwrite'/0,
		'map_eval'/0,
		'map_eval2'/0,
		'map_eval3'/0,
		'map_eval4'/0,
		'let_closure_apply_eval_without_overwrite'/0,	
		'let_closure_apply_eval_without_overwrite2'/0,
		'call_eval'/0,
		'multiple_function_let'/0,
		'case_eval'/0,
		'case_eval2'/0,
		'case_eval_fun'/0,
		'letrec_eval'/0,
		'unnamed_eval'/0,
		'returned_function'/0,
		'returned_recursive_function'/0,
		'returned_function2'/0,
		'returned_recursive_function2'/0,
		'returned_function3'/0,
		'test'/0,
		'weird_apply'/0,
		'sum'/0,
		'letrec_no_replace'/0,
		'seq_eval1'/0,
		'fun4'/0
		]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[116|[101|[115|[116|[115|[46|[101|[114|[108]]]]]]]]],1}],
		%% Line 2
		'compile' =
		    %% Line 2
		    ['export_all']]
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('tests')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('tests', _0)

'eval_letrec1'/0 = fun() ->
	letrec 'x'/1 = fun(X) -> apply 'x'/1(X) in apply 'x'/1({})

%%'eval_letrec2'/0 = fun() ->
%%	let F = fun(X) -> apply F(X) in apply F({})

'fun1'/0 = fun() -> apply 'fun3'/0()
'fun2'/0 = fun() -> 42
'fun3'/0 = fun() -> apply 'fun2'/0()

'eval_multiple_top_level_funs'/0 = fun() ->
	apply 'fun1'/0()

'eval_multiple_top_level_funs2'/0 = fun() ->
	letrec  'fun1'/0 = fun() -> apply 'fun3'/0()
			'fun2'/0 = fun() -> 42
			'fun3'/0 = fun() -> apply 'fun2'/0() in 
      apply 'fun1'/0()

'top_overwrite'/0 = fun() ->
	letrec 'fun2'/0 = fun() -> 40 in apply 'fun2'/0()
	
'top_no_overwrite'/0 = fun() ->
	letrec 'fun2'/1 = fun(X) -> 40 in apply 'fun1'/0()

%'eval_let_func'/0 = fun() ->
%	let X = 42 in 
%		let <X, X> = <fun() -> [], ~{}~> in ~{}~

'eval_let_apply'/0 = fun() ->
	let X = 42 in
		let Y = fun() -> X in apply Y()

'eval_multiple_let'/0 = fun() ->
	let X = 1 in
		let X = 2 in X

'let_eval_1'/0 = fun() ->
	let X = {} in ~{}~

'let_eval_2'/0 = fun() ->
	let X = ~{}~ in
		let X = {} in ~{}~

%'let_eval_3'/0 = fun() ->
%	let X = ~{}~ in
%		let <X, X, Y> = <{}, [], X> in Y

'let_eval_4'/0 = fun() ->
	let X = 5 in X

'tuple_eval'/0 = fun() ->
	let <X, Y> = <'foo', {}> in {5, X, Y}

'Plus'/2 = fun(X, Y) -> 3

'apply_top_eval'/0 = fun() -> apply 'Plus'/2(2,3)

'apply_eval'/0 = fun() ->
	let <Minus, X> = <fun(X, Y) -> 42, ~{}~> in
		apply Minus(X, X)

'list_eval'/0 = fun() ->
	let X = 5 in
		[X|[]]

'list_eval2'/0 = fun() ->
	let X = 5 in
		[X|[X|[]]]

'let_eval_overwrite'/0 = fun() ->
	let X = fun() -> {} in
		let X = 5 in X

'map_eval'/0 = fun() ->
	let X = 42 in
		~{5 => X}~

'map_eval2'/0 = fun() ->
	let X = 42 in
		~{54 => X, X => X}~

'map_eval3'/0 = fun() ->
	let X = 5 in
		~{5 => X, X => call 'erlang':'+'(1, X)}~

'map_eval4'/0 = fun() ->
	let <X, Y, Z> = <fun() -> 1, fun() -> 2, fun() -> 3> in
		~{Z => 10, X => 11, Y => 12, X => 13}~

'let_closure_apply_eval_without_overwrite'/0 = fun() ->
	let X = 42 in
		let Y = fun(X) -> X in
			let X = 5 in apply Y(7)

'let_closure_apply_eval_without_overwrite2'/0 = fun() ->
	let X = 42 in
		let Y = fun() -> X in
			let X = 5 in apply Y()

'call_eval'/0 = fun() -> 
	let X = 5 in call 'erlang':'+'(X, 2)

'multiple_function_let'/0 = fun() ->
	let Z = call 'erlang':'+'(2, 2) in
		let Y = fun() -> Z in
			let X = fun() -> apply Y() in
				apply X()

'case_eval'/0 = fun() ->
	let X = {} in
		case X of
			<5> when 'true' -> 5
			<6> when 'true' -> 6
			<Z> when 'true' -> Z
		end

'case_eval2'/0 = fun() ->
	let X = {} in
		case X of
			<5> when 'true' -> 5
			<6> when 'true' -> 6
			<Z> when 'false' -> Z
			<Z> when 'true' -> ~{}~
		end

'case_eval_fun'/0 = fun() ->
	let Y = 'true' in
		let X = fun() -> Y in
			case <X, Y> of
				<5, 'true'> when 'true' -> 5
				<6, 'true'> when 'true' -> 6
				<Z, 'true'> when 'true' -> apply Z()
			end

'fun4'/0 = fun() -> let <X, Y, Z> = <[], let Y = 5 in Y, call 'erlang':'+'(3, 4)> in {X, Y, Z}

'letrec_eval'/0 = fun() ->
	let X = 42 in
		letrec 'fun2'/0 = fun() -> X
			   'fun4'/1 = fun(Z) -> Z
		in apply 'fun4'/0()

'unnamed_eval'/0 = fun() ->
	let X = 5 in
		apply fun(Y) -> Y(X)

'returned_function'/0 = fun () ->
	let X = fun() -> fun() -> 5 in
		apply apply X()()

'returned_recursive_function'/0 = fun () ->
	letrec 'fun1'/0 = fun() -> fun() -> 5 in
		apply apply 'fun1'/0()()

'returned_function2'/0 = fun () ->
let X = 7 in
	let X = fun() -> fun() -> X in
		apply apply X()()

'returned_recursive_function2'/0 = fun () ->
let X = 7 in
	letrec 'fun1'/0 = fun() -> fun() -> X in
		apply apply 'fun1'/0()()

'returned_function3'/0 = fun() ->
let F = fun(X) ->
	let Y = call 'erlang':'+'(X, 3) in
		fun(Z) -> call 'erlang':'+'(call 'erlang':'+'(X, Y), Z)
	in
	apply apply F(1)(1)

'test'/0 = fun() ->
  [call 'io':'fwrite'([97]),call 'io':'fwrite'([98]), call 'io':'fwrite'([99]),
   call 'io':'fwrite'([100]),call 'io':'fwrite'([101]), call 'io':'fwrite'([102])]
  %%[call 'io':'fwrite'([97])|[call 'io':'fwrite'([98])|[call 'io':'fwrite'([99])|[
  %%call 'io':'fwrite'([100])|[call 'io':'fwrite'([101])|[call 'io':'fwrite'([102])|[]
  %%]]]]]]

'weird_apply'/0 = fun() ->
	letrec 'f'/1 = fun(X) -> case X of 
	                           <0> when 'true' -> 5
							   <1> when 'true' -> apply 'f'/1(0)
	                           <A> when 'true' -> apply 'f'/1(1)
							 end
	in
		let X = fun(F) -> letrec 'f'/1 = fun(X) -> 0 in apply F(2)
		in
			apply X('f'/1)

'sum'/0 = fun() ->
	letrec 'f'/1 = fun(X) -> case X of
								<0> when 'true' -> 0
								<Y> when 'true' -> call 'erlang':'+'(Y, apply 'f'/1(call 'erlang':'+'(Y, -1)))
							 end
	in apply 'f'/1(3)

'letrec_no_replace'/0 = fun() ->
	let X = 42 in
		letrec 'f'/0 = fun() -> X in
			let X = 5 in apply 'f'/0()

'seq_eval1'/0 = fun() ->
	do let X = 42 in X let Y = 20 in Y


end
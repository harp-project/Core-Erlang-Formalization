From CoreErlang Require Import Syntax.
Import ListNotations.


Definition testtak := ELetRec [(3, (EExp (ECase (EExp (EValues [(VVal (VVar 6));(VVal (VVar 7));(VVal (VVar 8))])) [([PVar;PVar;PVar], (VVal (VLit (Atom "true"%string))), (EExp (ECase (EExp (EValues [])) [([], (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "<"%string))) [(VVal (VVar 1));(VVal (VVar 0))])), (EExp (ELet 1 (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "-"%string))) [(VVal (VVar 0));(VVal (VLit (Integer (1))))])) (EExp (ELet 1 (EExp (EApp (VVal (VFunId (4, 3))) [(VVal (VVar 0));(VVal (VVar 2));(VVal (VVar 3))])) (EExp (ELet 1 (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "-"%string))) [(VVal (VVar 3));(VVal (VLit (Integer (1))))])) (EExp (ELet 1 (EExp (EApp (VVal (VFunId (6, 3))) [(VVal (VVar 0));(VVal (VVar 5));(VVal (VVar 3))])) (EExp (ELet 1 (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "-"%string))) [(VVal (VVar 6));(VVal (VLit (Integer (1))))])) (EExp (ELet 1 (EExp (EApp (VVal (VFunId (8, 3))) [(VVal (VVar 0));(VVal (VVar 5));(VVal (VVar 6))])) (EExp (EApp (VVal (VFunId (9, 3))) [(VVal (VVar 4));(VVal (VVar 2));(VVal (VVar 0))])))))))))))))));([], (VVal (VLit (Atom "true"%string))), (VVal (VVar 2)));([], (VVal (VLit (Atom "true"%string))), (EExp (EPrimOp "match_fail"%string [(VVal (VLit (Atom "if_clause"%string)))])))])));([PVar;PVar;PVar], (VVal (VLit (Atom "true"%string))), (EExp (EPrimOp "match_fail"%string [(EExp (ETuple [(VVal (VLit (Atom "function_clause"%string)));(VVal (VVar 0));(VVal (VVar 1));(VVal (VVar 2))]))])))])));
(2, (EExp (ECase (EExp (EValues [(VVal (VVar 6));(VVal (VVar 7))])) [([(PLit (Integer (0)));PVar], (VVal (VLit (Atom "true"%string))), (VVal (VVar 0)));([PVar;PVar], (VVal (VLit (Atom "true"%string))), (EExp (ELet 1 (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "-"%string))) [(VVal (VVar 0));(VVal (VLit (Integer (1))))])) (EExp (ELet 1 (EExp (EApp (VVal (VFunId (3, 3))) [(VVal (VLit (Integer (32))));(VVal (VLit (Integer (22))));(VVal (VLit (Integer (16))))])) (EExp (EApp (VVal (VFunId (5, 2))) [(VVal (VVar 1));(VVal (VVar 0))])))))));([PVar;PVar], (VVal (VLit (Atom "true"%string))), (EExp (EPrimOp "match_fail"%string [(EExp (ETuple [(VVal (VLit (Atom "function_clause"%string)));(VVal (VVar 0));(VVal (VVar 1))]))])))])));
(1, (EExp (ECase (VVal (VVar 6)) [([PNil], (VVal (VLit (Atom "true"%string))), (EExp (EApp (VVal (VFunId (1, 2))) [(VVal (VLit (Integer (1000))));(VVal (VLit (Integer (0))))])));([PVar], (VVal (VLit (Atom "true"%string))), (EExp (EPrimOp "match_fail"%string [(EExp (ETuple [(VVal (VLit (Atom "function_clause"%string)));(VVal (VVar 0))]))])))])));
(1, (EExp (ECase (VVal (VVar 6)) [([PVar], (VVal (VLit (Atom "true"%string))), (EExp (ECall (VVal (VLit (Atom "hipe"%string))) (VVal (VLit (Atom "c"%string))) [(VVal (VLit (Atom "tak"%string)));(VVal (VVar 0))])));([PVar], (VVal (VLit (Atom "true"%string))), (EExp (EPrimOp "match_fail"%string [(EExp (ETuple [(VVal (VLit (Atom "function_clause"%string)));(VVal (VVar 0))]))])))])));
(0, (EExp (ECase (EExp (EValues [])) [([], (VVal (VLit (Atom "true"%string))), (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "get_module_info"%string))) [(VVal (VLit (Atom "tak"%string)))])));([], (VVal (VLit (Atom "true"%string))), (EExp (EPrimOp "match_fail"%string [(EExp (ETuple [(VVal (VLit (Atom "function_clause"%string)))]))])))])));
(1, (EExp (ECase (VVal (VVar 6)) [([PVar], (VVal (VLit (Atom "true"%string))), (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "get_module_info"%string))) [(VVal (VLit (Atom "tak"%string)));(VVal (VVar 0))])));([PVar], (VVal (VLit (Atom "true"%string))), (EExp (EPrimOp "match_fail"%string [(EExp (ETuple [(VVal (VLit (Atom "function_clause"%string)));(VVal (VVar 0))]))])))])))] (EApp (VVal (VFunId (2, 1))) [VVal VNil]).



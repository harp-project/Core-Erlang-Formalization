From CoreErlang Require Import Syntax.
Import ListNotations.


Definition testpmap := ELetRec [(2, (EExp (ECase (VVal (VVar 5)) [([PNil], (VVal (VLit (Atom "true"%string))), (VVal VNil));([(PCons PVar PVar)], (VVal (VLit (Atom "true"%string))), (EExp (ECons (EExp (EApp (VVal (VVar 6)) [(VVal (VVar 0))])) (EExp (EApp (VVal (VFunId (2, 2))) [(VVal (VVar 6));(VVal (VVar 1))])))))])));
(3, (EExp (ELetRec [(2, (EExp (ECase (VVal (VVar 2)) [([PNil], (VVal (VLit (Atom "true"%string))), (VVal VNil));([(PCons PVar PVar)], (VVal (VLit (Atom "true"%string))), (EExp (ECons (EExp (EApp (VVal (VVar 3)) [(VVal (VVar 0))])) (EExp (EApp (VVal (VFunId (2, 2))) [(VVal (VVar 3));(VVal (VVar 1))])))))])))] (EExp (ECase (EExp (ECall (VVal (VLit (Atom "lists"%string))) (VVal (VLit (Atom "split"%string))) [(VVal (VVar 6));(VVal (VVar 7))])) [([(PTuple [PVar;PVar])], (VVal (VLit (Atom "true"%string))), (EExp (ELet 1 (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "self"%string))) [])) (EExp (ESeq (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "spawn"%string))) [(EExp (EFun 0 (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "!"%string))) [(VVal (VVar 0));(EExp (EApp (VVal (VFunId (3, 2))) [(VVal (VVar 8));(VVal (VVar 1))]))]))));(VVal VNil)])) (EExp (ELet 1 (EExp (EApp (VVal (VFunId (3, 2))) [(VVal (VVar 8));(VVal (VVar 2))])) (EExp (ELet 1 (VVal (VLit (Atom "infinity"%string))) (EExp (ELetRec [(0, (EExp (ELet 2 (EExp (EPrimOp "recv_peek_message"%string [])) (EExp (ECase (VVal (VVar 0)) [([(PLit (Atom "true"%string))], (VVal (VLit (Atom "true"%string))), (EExp (ECase (VVal (VVar 1)) [([PVar], (VVal (VLit (Atom "true"%string))), (EExp (ESeq (EExp (EPrimOp "remove_message"%string [])) (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "++"%string))) [(VVal (VVar 0));(VVal (VVar 5))])))));([PVar], (VVal (VLit (Atom "true"%string))), (EExp (ESeq (EExp (EPrimOp "recv_next"%string [])) (EExp (EApp (VVal (VFunId (3, 0))) [])))))])));([(PLit (Atom "false"%string))], (VVal (VLit (Atom "true"%string))), (EExp (ELet 1 (EExp (EPrimOp "recv_wait_timeout"%string [(VVal (VVar 3))])) (EExp (ECase (VVal (VVar 0)) [([(PLit (Atom "true"%string))], (VVal (VLit (Atom "true"%string))), (VVal VNil));([(PLit (Atom "false"%string))], (VVal (VLit (Atom "true"%string))), (EExp (EApp (VVal (VFunId (3, 0))) [])))])))))])))))] (EExp (EApp (VVal (VFunId (0, 0))) [])))))))))))))])))));
(2, (EExp (ECase (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "=="%string))) [(VVal (VVar 4));(VVal (VLit (Integer (0))))])) [([(PLit (Atom "true"%string))], (VVal (VLit (Atom "true"%string))), (VVal VNil));([(PLit (Atom "false"%string))], (VVal (VLit (Atom "true"%string))), (EExp (ECons (VVal (VVar 5)) (EExp (EApp (VVal (VFunId (2, 2))) [(EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "-"%string))) [(VVal (VVar 4));(VVal (VLit (Integer (1))))]));(VVal (VVar 5))])))))])));
(1, (EExp (ELet 1 (EExp (EApp (VVal (VFunId (2, 2))) [(VVal (VLit (Integer (100000))));(VVal (VLit (Integer (0))))])) (EExp (ELet 1 (EExp (EFun 1 (EExp (ECall (VVal (VLit (Atom "erlang"%string))) (VVal (VLit (Atom "+"%string))) [(VVal (VVar 0));(VVal (VLit (Integer (1))))])))) (EExp (EApp (VVal (VFunId (3, 3))) [(VVal (VVar 0));(VVal (VLit (Integer (50000))));(VVal (VVar 1))])))))))] (EApp (VVal (VFunId (3, 1))) [VVal VNil]).


